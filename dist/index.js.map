{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";AAAA,2BAA2F,UAAU,CAAC,CAAA;AACtG,8BAA0B,gCAAgC,CAAC,CAAA;AAC3D,8BAAkC,iCAAiC,CAAC,CAAA;AACpE,4BAAwB,8BAA8B,CAAC,CAAA;AACvD,6BAAyB,+BAA+B,CAAC,CAAA;AACzD,iCAA6B,mCAAmC,CAAC,CAAA;AACjE,6BAAyB,+BAA+B,CAAC,CAAA;AACzD,mCAA+B,wBAAwB,CAAC,CAAA;AACxD,MAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AAErC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,EAC5B,GAAG,GAAG,IAAI,OAAO,CAAC;AAExB,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AAClC,QAAQ,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAEjD,MAAM,WAAW,GAAG,IAAI,yBAAW,EAC7B,mBAAmB,GAAG,IAAI,iCAAmB,EAC7C,SAAS,GAAG,IAAI,qBAAS,EACzB,UAAU,GAAG,IAAI,uBAAU,EAC3B,cAAc,GAAG,IAAI,+BAAc,EACnC,UAAU,GAAG,IAAI,uBAAU,CAAC;AAElC,MAAM,KAAK,GACL,IAAI,cAAG,CAAC,KAAK,CAAC;KACX,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAEnC,MAAM,KAAK,GACL,IAAI,cAAG,CAAC,KAAK,CAAC;KACf,IAAI,CAAC,WAAW,CAAC;KACjB,IAAI,CAAC,SAAS,CAAC;KACf,IAAI,CAAC,UAAU,CAAC;KAChB,IAAI,CAAC,cAAc,CAAC;KACpB,IAAI,CAAC,UAAU,CAAC;KAChB,QAAQ,CAAC,IAAI,2BAAgB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;KAC1D,QAAQ,CAAC,IAAI,4BAAiB,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;KAC3D,QAAQ,CAAC,IAAI,4BAAiB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;KACxD,QAAQ,CAAC,IAAI,2BAAgB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;KACtD,QAAQ,CAAC,IAAI,2BAAgB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;KACrD,QAAQ,CAAC,IAAI,2BAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;KACrD,QAAQ,CAAC,IAAI,4BAAiB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;KACvD,QAAQ,CAAC,IAAI,4BAAiB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;KACtD,QAAQ,CAAC,IAAI,4BAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;KACxD,QAAQ,CAAC,IAAI,4BAAiB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;AAE5D,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AAEvC,MAAM,MAAM,GAAG,IAAI,mCAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAClD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAElB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC","sourcesContent":["import {ApiEdgeError, OneToOneRelation, OneToManyRelation, ApiEdgeQueryResponse, Api} from \"api-core\";\nimport {StudentEdge} from \"./src/edges/memory/StudentEdge\";\nimport {MongooseStudentEdge} from \"./src/edges/mongodb/StudentEdge\";\nimport {ClassEdge} from \"./src/edges/memory/ClassEdge\";\nimport {CourseEdge} from \"./src/edges/memory/CourseEdge\";\nimport {CourseTypeEdge} from \"./src/edges/memory/CourseTypeEdge\";\nimport {SchoolEdge} from \"./src/edges/memory/SchoolEdge\";\nimport {EllipseApiRouter} from \"./src/EllipseApiRouter\";\nimport * as mongoose from \"mongoose\";\n\nconst Ellipse = require('ellipse'),\n      app = new Ellipse;\n\nmongoose.Promise = global.Promise;\nmongoose.connect(\"mongodb://localhost/api-demo\");\n\nconst studentEdge = new StudentEdge,\n      mongooseStudentEdge = new MongooseStudentEdge,\n      classEdge = new ClassEdge,\n      courseEdge = new CourseEdge,\n      courseTypeEdge = new CourseTypeEdge,\n      schoolEdge = new SchoolEdge;\n\nconst api10\n    = new Api('1.0')\n        .edge(mongooseStudentEdge);\n\nconst api11\n    = new Api('1.1')\n    .edge(studentEdge)\n    .edge(classEdge)\n    .edge(courseEdge)\n    .edge(courseTypeEdge)\n    .edge(schoolEdge)\n    .relation(new OneToOneRelation(courseEdge, courseTypeEdge))\n    .relation(new OneToManyRelation(courseTypeEdge, courseEdge))\n    .relation(new OneToManyRelation(studentEdge, courseEdge))\n    .relation(new OneToOneRelation(studentEdge, classEdge))\n    .relation(new OneToOneRelation(classEdge, schoolEdge))\n    .relation(new OneToOneRelation(courseEdge, classEdge))\n    .relation(new OneToManyRelation(classEdge, studentEdge))\n    .relation(new OneToManyRelation(classEdge, courseEdge))\n    .relation(new OneToManyRelation(schoolEdge, studentEdge))\n    .relation(new OneToManyRelation(schoolEdge, classEdge));\n\napp.use(require('body-parser').json());\n\nconst router = new EllipseApiRouter(api11, api10);\nrouter.apply(app);\n\napp.listen(8080);\n\n//TEST: http://localhost:8080/api/v1.0/schools/s1/students/s2/class/courses?fields=id,name\n/*\n [\n     {\n         \"id\": \"c1\",\n         \"name\": \"Maths A1\"\n     },\n     {\n         \"id\": \"c6\",\n         \"name\": \"Science A1\"\n     }\n ]\n */"]}