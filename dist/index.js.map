{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeError, OneToOneRelation, OneToManyRelation, ApiEdgeQueryResponse, Api} from \"api-core\";\nimport {MongooseModelFactory} from \"api-model-mongoose\";\nimport {EllipseApiRouter} from \"api-provider-ellipse\";\nimport * as mongoose from \"mongoose\";\n\n\nconst Ellipse = require('ellipse'),\n      app = new Ellipse;\n\nmongoose.Promise = global.Promise;\nmongoose.connect(\"mongodb://localhost/api-demo\");\n\nconst studentEdge =\n          MongooseModelFactory.createModel(\"student\", \"students\", {\n              id: String,\n              firstName: String,\n              lastName: String,\n              email: String,\n              phone: String,\n              schoolId: {\n                  ref: 'school',\n                  type: mongoose.Schema.Types.ObjectId\n              },\n              classId: mongoose.Schema.Types.ObjectId\n          }),\n      classEdge =\n          MongooseModelFactory.createModel(\"class\", \"classes\", {\n              id: String,\n              name: String,\n              semester: String,\n              room: String,\n              schoolId: mongoose.Schema.Types.ObjectId\n          }),\n      courseEdge =\n          MongooseModelFactory.createModel(\"course\", \"courses\", {\n              id: String,\n              name: String,\n              classId: mongoose.Schema.Types.ObjectId,\n              courseTypeId: mongoose.Schema.Types.ObjectId\n          }),\n      courseTypeEdge =\n          MongooseModelFactory.createModel(\"courseType\", \"courseTypes\", {\n              id: String,\n              name: String\n          }),\n      schoolEdge =\n          MongooseModelFactory.createModel(\"school\", \"schools\", {\n              id: String,\n              name: String,\n              address: String,\n              phone: String\n          });\n\nconst api10\n    = new Api('1.0')\n        .edge(studentEdge);\n\nconst api11\n    = new Api('1.1')\n    .edge(studentEdge)\n    .edge(classEdge)\n    .edge(courseEdge)\n    .edge(courseTypeEdge)\n    .edge(schoolEdge)\n    .relation(new OneToOneRelation(courseEdge, courseTypeEdge))\n    .relation(new OneToManyRelation(courseTypeEdge, courseEdge))\n    .relation(new OneToManyRelation(studentEdge, courseEdge))\n    .relation(new OneToOneRelation(studentEdge, classEdge))\n    .relation(new OneToOneRelation(studentEdge, schoolEdge))\n    .relation(new OneToOneRelation(classEdge, schoolEdge))\n    .relation(new OneToOneRelation(courseEdge, classEdge))\n    .relation(new OneToManyRelation(classEdge, studentEdge))\n    .relation(new OneToManyRelation(classEdge, courseEdge))\n    .relation(new OneToManyRelation(schoolEdge, studentEdge))\n    .relation(new OneToManyRelation(schoolEdge, classEdge));\n\napp.use(require('body-parser').json());\napp.get('/favicon.ico', (req: any, res: any) => res.send(''));\n\nconst router = new EllipseApiRouter(api11, api10);\nrouter.apply(app);\n\napp.listen(8080);\n\n//TEST: http://localhost:8080/api/v1.0/schools/s1/students/s2/class/courses?fields=id,name\n/*\n [\n     {\n         \"id\": \"c1\",\n         \"name\": \"Maths A1\"\n     },\n     {\n         \"id\": \"c6\",\n         \"name\": \"Science A1\"\n     }\n ]\n */"]}