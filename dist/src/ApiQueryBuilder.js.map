{"version":3,"file":"ApiQueryBuilder.js","sourceRoot":"","sources":["../../src/ApiQueryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiQuery, QueryScope, QueryStep} from \"./ApiQuery\";\nimport {\n    ApiRequest, ApiRequestType, EdgePathSegment, EntryPathSegment, RelatedFieldPathSegment,\n    PathSegment\n} from \"./ApiRequest\";\nimport {Api} from \"./Api\";\nimport {ApiEdgeQuery, ApiEdgeQueryType, ApiEdgeQueryFilterType, ApiEdgeQueryContext, ApiEdgeQueryResponse,ApiEdgeDefinition,ApiEdgeError, ApiEdgeRelation, OneToOneRelation} from \"api-core\";\n\nclass QueryEdgeQueryStep implements QueryStep {\n    query: ApiEdgeQuery;\n\n    constructor(query: ApiEdgeQuery) {\n        this.query = query;\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise((resolve, reject) => {\n            this.query.context = scope.context;\n            //console.log(`QUERY /${this.query.edge.pluralName}`, scope.context);\n            this.query.execute().then((response) => {\n                scope.context = new ApiEdgeQueryContext();\n                scope.response = response;\n                resolve(scope)\n            }).catch(reject);\n        })\n    };\n\n    inspect = () => `QUERY /${this.query.edge.pluralName}`;\n}\n\nclass RelateQueryStep implements QueryStep {\n    relation: ApiEdgeRelation;\n\n    constructor(relation: ApiEdgeRelation) {\n        this.relation = relation;\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            scope.context.filter(this.relation.relationId, ApiEdgeQueryFilterType.Equals, scope.response.data.id);\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `RELATE ${this.relation.relationId}`;\n}\n\nclass CheckResponseQueryStep implements QueryStep {\n    execute = (scope: QueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Related Entry\"));\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `CHECK`;\n}\n\nclass NotImplementedQueryStep implements QueryStep {\n    description: string;\n\n    constructor(description: string) {\n        this.description = description;\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise(resolve => {\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `NOT IMPLEMENTED: ${this.description}`;\n}\n\nclass SetResponseQueryStep implements QueryStep {\n    response: ApiEdgeQueryResponse;\n\n    constructor(response: ApiEdgeQueryResponse) {\n        this.response = response;\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise(resolve => {\n            scope.response = this.response;\n            scope.context = new ApiEdgeQueryContext();\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `SET RESPONSE`;\n}\n\nclass ProvideIdQueryStep implements QueryStep {\n    fieldName: string;\n\n    constructor(fieldName: string = \"id\") {\n        this.fieldName = fieldName;\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise((resolve, reject) => {\n            if(!scope.response) return reject(new ApiEdgeError(404, \"Missing Entry\"));\n            scope.context.id = scope.response.data[this.fieldName];\n            resolve(scope);\n        })\n    };\n\n    inspect = () => `PROVIDE ID: ${this.fieldName}`;\n}\n\nclass ExtendContextQueryStep implements QueryStep {\n    context: ApiEdgeQueryContext;\n\n    constructor(context: ApiEdgeQueryContext) {\n        this.context = context\n    }\n\n    execute = (scope: QueryScope) => {\n        return new Promise(resolve => {\n            scope.context.id = this.context.id || scope.context.id;\n            if(this.context.pagination) {\n                scope.context.pagination = this.context.pagination;\n            }\n            this.context.fields.forEach(f => scope.context.fields.push(f));\n            this.context.populatedFields.forEach(f => scope.context.populatedFields.push(f));\n            this.context.filters.forEach(f => scope.context.filters.push(f));\n            resolve(scope)\n        })\n    };\n\n    inspect = () => {\n        if(this.context.id) {\n            return `EXTEND CONTEXT (id=${this.context.id})`\n        }\n        else {\n            return `APPLY PARAMETERS`\n        }\n    };\n}\n\nclass GenericQueryStep implements QueryStep {\n    description: string;\n    step: () => Promise<QueryScope>;\n    context: any;\n\n    constructor(description: string, step: () => Promise<QueryScope>, context: any) {\n        this.description = description;\n        this.step = step;\n        this.context = context;\n    }\n\n    execute = (scope: QueryScope) => {\n        return this.step.apply(this.context, [ scope ]);\n    };\n\n    inspect = () => this.description\n}\n\nexport class ApiQueryBuilder {\n\n    api: Api;\n\n    constructor(api: Api) {\n        this.api = api;\n    }\n\n    private buildProvideIdStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        if(currentSegment instanceof EntryPathSegment) {\n            query.unshift(new ExtendContextQueryStep(new ApiEdgeQueryContext(currentSegment.id)));\n            return false\n        }\n        else if(currentSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new ProvideIdQueryStep(currentSegment.relation.relationId));\n            return true\n        }\n        else {\n            //TODO: Add support for method calls\n            return false\n        }\n    }\n\n    private buildCheckStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        //STEP 1: Create the check query.\n        //query.unshift(new NotImplementedQueryStep(\"CHECK\"));\n        //TODO\n        if(currentSegment instanceof EntryPathSegment) {\n            query.unshift(new SetResponseQueryStep(new ApiEdgeQueryResponse({ id: currentSegment.id })));\n            return false\n        }\n        else if(currentSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.relation.to, ApiEdgeQueryType.Get)));\n        }\n        else {\n            //TODO: Add support for method calls\n            return false\n        }\n\n        //STEP 2: Provide ID for the check query.\n        return this.buildProvideIdStep(query, currentSegment)\n    }\n\n    private buildReadStep(query: ApiQuery, currentSegment: PathSegment): boolean {\n        //STEP 1: Create the read query.\n        if(currentSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.relation.to, ApiEdgeQueryType.Get)));\n        }\n        else {\n            query.unshift(new QueryEdgeQueryStep(new ApiEdgeQuery(currentSegment.edge, ApiEdgeQueryType.Get)));\n        }\n\n        //STEP 2: Provide ID for the read query.\n        return this.buildProvideIdStep(query, currentSegment)\n    }\n\n    private buildReadQuery = (request: ApiRequest): ApiQuery => {\n        let query = new ApiQuery();\n\n        let segments = request.path.segments,\n            lastSegment = segments[segments.length-1];\n\n        //STEP 1: Create the base query which will provide the final data.\n        let baseQuery: ApiEdgeQuery;\n        if(lastSegment instanceof EdgePathSegment) {\n            baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.List);\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            baseQuery = new ApiEdgeQuery(lastSegment.relation.to, ApiEdgeQueryType.Get);\n        }\n        //TODO: Add support for method calls\n        else {\n            baseQuery = new ApiEdgeQuery(lastSegment.edge, ApiEdgeQueryType.Get);\n        }\n        query.unshift(new QueryEdgeQueryStep(baseQuery));\n\n        //STEP 2: Provide context for the base query.\n        query.unshift(new ExtendContextQueryStep(request.context));\n\n        //STEP 3: Provide ID for the base query.\n        if(lastSegment instanceof EntryPathSegment) {\n            query.unshift(new ExtendContextQueryStep(new ApiEdgeQueryContext(lastSegment.id)))\n        }\n        else if(lastSegment instanceof RelatedFieldPathSegment) {\n            query.unshift(new ProvideIdQueryStep(lastSegment.relation.relationId))\n        }\n        else {\n            //TODO: Add support for method calls\n        }\n\n        //STEP 4: Provide filters and validation for the base query.\n        let readMode = true;\n        for(let i = segments.length-2; i >= 0; i--) {\n            let currentSegment = segments[i];\n\n            //STEP 1: Relate to the current query.\n            let relation = segments[i+1].relation;\n            if(relation && !(relation instanceof OneToOneRelation)) {\n                query.unshift(new RelateQueryStep(relation));\n            }\n\n            //STEP 2: Read or Check\n            if(readMode) {\n                readMode = this.buildReadStep(query, currentSegment)\n            }\n            else {\n                readMode = this.buildCheckStep(query, currentSegment)\n            }\n        }\n\n        //STEP 5: Return the completed query.\n        return query\n    };\n\n    build = (request: ApiRequest): ApiQuery => {\n        switch(request.type) {\n            case ApiRequestType.Read:\n                return this.buildReadQuery(request);\n            default:\n                throw \"Unsupported Query Type\"\n        }\n    }\n}\n"]}