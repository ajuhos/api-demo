{"version":3,"file":"ApiRequest.js","sourceRoot":"","sources":["../../src/ApiRequest.ts"],"names":[],"mappings":";AAAA,2BAA0F,UAAU,CAAC,CAAA;AAErG;IAAA;QAII,YAAO,GAAG;YACN,MAAM,CAAC,EAAE,CAAC;QACd,CAAC,CAAA;IACL,CAAC;AAAD,CAAC;AAPY,mBAAW,cAOvB,CAAA;AAED,8BAAqC,WAAW;IAI5C,YAAY,IAAuB,EAAE,QAA2B;QAC5D,OAAO,CAAC;QAKZ,YAAO,GAAG;YACN,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC;QACjC,CAAC,CAAA;QANG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;AAKL,CAAC;AAbY,uBAAe,kBAa3B,CAAA;AAED,+BAAsC,WAAW;IAK7C,YAAY,IAAuB,EAAE,EAAU,EAAE,QAA2B;QACxE,OAAO,CAAC;QAMZ,YAAO,GAAG;YACN,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC;QAC3C,CAAC,CAAA;QAPG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACjB,CAAC;AAKL,CAAC;AAfY,wBAAgB,mBAe5B,CAAA;AAED,sCAA8C,WAAW;IAIrD,YAAY,IAAuB,EAAE,QAA0B;QAC3D,OAAO,CAAC;QAKZ,YAAO,GAAG;YACN,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrD,CAAC,CAAA;QANG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;AAKL,CAAC;AAbY,+BAAuB,0BAanC,CAAA;AAED;IAAA;QACI,aAAQ,GAAkB,EAAE,CAAC;QAE7B,QAAG,GAAG,CAAC,OAAoB;YACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC,CAAC;QAEF,YAAO,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxE,CAAC,CAAA;IACL,CAAC;AAAD,CAAC;AAVY,sBAAc,iBAU1B,CAAA;AAED,WAAY,cAAc;IACtB,uDAAM,CAAA;IACN,mDAAI,CAAA;IACJ,uDAAM,CAAA;IACN,uDAAM,CAAA;IACN,uDAAM,CAAA;AACV,CAAC,EANW,sBAAc,KAAd,sBAAc,QAMzB;AAND,IAAY,cAAc,GAAd,sBAMX,CAAA;AAED;IAII,YAAY,IAAY,EAAE,KAAU;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;AACL,CAAC;AARY,2BAAmB,sBAQ/B,CAAA;AAED;IAMI;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,IAAI,8BAAmB,EAAE,CAAC;IAC7C,CAAC;AAML,CAAC;AAhBY,kBAAU,aAgBtB,CAAA","sourcesContent":["import {ApiEdgeDefinition, OneToOneRelation, OneToManyRelation, ApiEdgeQueryContext} from \"api-core\";\n\nexport class PathSegment {\n    edge: ApiEdgeDefinition;\n    relation: OneToManyRelation;\n\n    inspect = () => {\n        return '';\n    }\n}\n\nexport class EdgePathSegment extends PathSegment {\n    edge: ApiEdgeDefinition;\n    relation: OneToManyRelation;\n\n    constructor(edge: ApiEdgeDefinition, relation: OneToManyRelation) {\n        super();\n        this.edge = edge;\n        this.relation = relation;\n    }\n\n    inspect = () => {\n        return `[${this.edge.name}]`;\n    }\n}\n\nexport class EntryPathSegment extends PathSegment {\n    edge: ApiEdgeDefinition;\n    relation: OneToManyRelation;\n    id: string;\n\n    constructor(edge: ApiEdgeDefinition, id: string, relation: OneToManyRelation) {\n        super();\n        this.edge = edge;\n        this.relation = relation;\n        this.id = id;\n    }\n\n    inspect = () => {\n        return `${this.edge.name}(${this.id})`;\n    }\n}\n\nexport class RelatedFieldPathSegment extends  PathSegment {\n    edge: ApiEdgeDefinition;\n    relation: OneToOneRelation;\n\n    constructor(edge: ApiEdgeDefinition, relation: OneToOneRelation) {\n        super();\n        this.edge = edge;\n        this.relation = relation;\n    }\n\n    inspect = () => {\n        return `${this.edge.name}.${this.relation.name}`;\n    }\n}\n\nexport class ApiRequestPath {\n    segments: PathSegment[] = [];\n\n    add = (segment: PathSegment) => {\n        this.segments.push(segment);\n    };\n\n    inspect = () => {\n        return this.segments.map(segment => segment.inspect()).join(' -> ');\n    }\n}\n\nexport enum ApiRequestType {\n    Create,\n    Read,\n    Update,\n    Delete,\n    Exists\n}\n\nexport class ApiRequestParameter {\n    name: string;\n    value: any;\n\n    constructor(name: string, value: any) {\n        this.name = name;\n        this.value = value;\n    }\n}\n\nexport class ApiRequest {\n\n    type: ApiRequestType;\n    path: ApiRequestPath;\n    context: ApiEdgeQueryContext; //Should be request context\n\n    constructor() {\n        this.path = new ApiRequestPath();\n        this.type = ApiRequestType.Read;\n        this.context = new ApiEdgeQueryContext();\n    }\n\n/*    inspect = () => {\n        return 'ApiRequest {}';\n    }*/\n\n}\n"]}