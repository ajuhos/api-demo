{"version":3,"file":"EllipseApiEdgeRouter.js","sourceRoot":"","sources":["../../src/EllipseApiEdgeRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeDefinition, ApiEdgeError, ApiEdgeQuery, ApiEdgeQueryType} from \"api-core\";\nconst Router = require('ellipse').Router;\n\nfunction bodyToFieldSet(body) {\n    let fieldSet = [];\n    Object.keys(body).forEach(key => fieldSet.push({ key, value: body[key] }));\n    return fieldSet\n}\n\nexport class EllipseApiEdgeRouter extends Router {\n\n    edge: ApiEdgeDefinition;\n\n    constructor(edge: ApiEdgeDefinition) {\n        super();\n        this.edge = edge;\n\n        this.get('/', async function (req, res, next) {\n            try {\n                this.json = await edge.listEntries([]);\n                this.status = 200;\n                this.send()\n            }\n            catch(e) {\n                this.error = e;\n                next();\n            }\n        });\n\n        this.post('/', async function (req, res, next) {\n            try {\n                if(!req.body.id) {\n                    this.status = 400;\n                    this.send('Bad Request');\n                }\n                else {\n                    this.json = await edge.updateEntry(req.body.id, bodyToFieldSet(req.body));\n                    this.status = 200;\n                    this.send()\n                }\n            }\n            catch(e) {\n                this.error = e;\n                next();\n            }\n        });\n\n        this.delete('/', async function (req, res, next) {\n            try {\n                if(!req.body.id) {\n                    this.status = 400;\n                    this.send('Bad Request');\n                }\n                else {\n                    this.json = await edge.removeEntry(req.body.id);\n                    this.status = 200;\n                    this.send()\n                }\n            }\n            catch(e) {\n                this.error = e;\n                next();\n            }\n        });\n\n        this.put('/', async function (req, res, next) {\n            try {\n                this.json = await edge.createEntry(req.body);\n                this.status = 201;\n                this.send()\n            }\n            catch(e) {\n                this.error = e;\n                next();\n            }\n        });\n\n        this.get('/:id', async function (req, res, next) {\n            try {\n                this.json = await edge.getEntry(req.params.id);\n                this.status = 200;\n                this.send()\n            }\n            catch(e) {\n                this.error = e;\n                next();\n            }\n        });\n\n        this.post('/:id', async function (req, res, next) {\n            try {\n                this.json = await edge.updateEntry(req.params.id, bodyToFieldSet(req.body));\n                this.status = 200;\n                this.send()\n            }\n            catch(e) {\n                this.error = e;\n                next();\n            }\n        });\n\n        this.delete('/:id', async function (req, res, next) {\n            try {\n                this.json = await edge.removeEntry(req.params.id);\n                this.status = 200;\n                this.send()\n            }\n            catch(e) {\n                this.error = e;\n                next();\n            }\n        });\n\n        this.get(/^\\/([^\\/]*)\\/(.*)$/, async function (req, res, next) {\n            try {\n                const id = req.params[0];\n                if(await edge.exists(id)) {\n                    let query = req.params[1].split('/');\n\n                    var plan = [];\n                    while(query.length) {\n                        let name = query[0],\n                            relation = edge.relations.find(r => r.name === name);\n\n                        if(relation) {\n                            plan.push(relation.query(id, query))\n                        }\n                        else {\n                            this.status = 400;\n                            this.send('Bad Request');\n                            return;\n                        }\n                    }\n\n                    const step = (result) => {\n                        if (plan.length) {\n                            plan.shift().execute().then(step).catch((e) => {\n                                this.error = e;\n                                next();\n                            });\n                        }\n                        else {\n                            this.json = result;\n                            this.status = 200;\n                            this.send()\n                        }\n                    };\n\n                    step(null);\n                }\n                else {\n                    this.status = 404;\n                    this.send('Not Found');\n                }\n            }\n            catch(e) {\n                this.error = e;\n                next();\n            }\n        });\n\n        this.use(async function (req, res, next) {\n            let e = this.error;\n            if(e instanceof ApiEdgeError) {\n                this.status = e.status;\n                this.send(e.message);\n            }\n            else {\n                console.log(e);\n                this.status = 500;\n                this.send(\"Internal Server Error\");\n            }\n        });\n\n    }\n\n    apply = (app) => {\n        console.log(`adding edge ${this.edge.name}`);\n        app.use('/' + this.edge.name, this);\n    };\n\n}\n"]}