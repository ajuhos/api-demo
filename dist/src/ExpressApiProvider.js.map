{"version":3,"file":"ExpressApiProvider.js","sourceRoot":"","sources":["../../src/ExpressApiProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeDefinition, ApiEdgeError, ApiEdgeQueryResponse, Api} from \"api-core\";\nimport {Application} from \"express\";\n\nexport class ExpressApiProvider {\n\n\n    defaultApi: Api;\n    apis: Api[];\n\n    private apiVersions: string[];\n\n    constructor(...apis: Api[]) {\n        super();\n\n        this.apis = apis;\n        this.defaultApi = apis[0];\n\n        this.apiVersions = apis.map(api => api.version);\n    }\n\n    apply = (app) => {\n        let router = this;\n\n        app.get('/api/v:version/*', function(req, res, next) {\n            let index = router.apiVersions.indexOf(req.params.version);\n            if(index == -1) {\n                this.error = new ApiEdgeError(400, \"Unsupported API version\");\n                next()\n            }\n            else {\n                this.api = router.apis[index];\n                req.path = req.path.replace(`/api/v${this.api.version}/`, '');\n                next()\n            }\n        });\n\n        app.get('/api/*', function (req, res, next) {\n            if(!this.api) this.api = router.defaultApi;\n            req.path = req.path.replace('/api/', '');\n            next()\n        });\n\n        app.use(function(req, res, next) {\n            if(this.error || !this.api) next();\n            else {\n                try {\n                    let request = this.api.parseRequest(req.path.split('/'));\n                    if (req.query.fields) request.context.fields = req.query.fields.split(',');\n\n                    console.log(request.path);\n                    let query = this.api.buildQuery(request);\n                    console.log(query.steps);\n                    query.execute()\n                        .then((res: ApiEdgeQueryResponse) => {\n                            this.json = res.data;\n                            this.send()\n                        })\n                        .catch((e: any) => {\n                            this.error = e;\n                            next()\n                        })\n                }\n                catch (e) {\n                    this.error = e;\n                    next()\n                }\n            }\n        });\n\n        app.use(function () {\n            let e = this.error;\n            if(e instanceof ApiEdgeError) {\n                this.status = e.status;\n                this.send(e.message);\n            }\n            else {\n                if(e) console.log(e);\n                this.status = 500;\n                this.send(\"Internal Server Error\");\n            }\n        });\n    };\n\n}\n"]}