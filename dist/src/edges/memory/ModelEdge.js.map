{"version":3,"file":"ModelEdge.js","sourceRoot":"","sources":["../../../../src/edges/memory/ModelEdge.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeDefinition, ApiEdgeError, ApiEdgeQueryContext, ApiEdgeQueryResponse, ApiEdgeQueryFilter, ApiEdgeQueryFilterType} from \"api-core\";\nconst uuid = require('node-uuid');\n\nexport class Model {\n    id: string;\n\n    constructor(obj: any) {\n        this.id = obj.id;\n    }\n}\n\nexport class ModelEdge<ModelType extends Model> implements ApiEdgeDefinition {\n\n    name = \"entry\";\n    pluralName = \"entries\";\n\n    provider: ModelType[] = [];\n    protected createModel: (obj: any) => ModelType;\n\n    methods: any = {};\n    relations = [];\n\n    inspect = () => `/${this.pluralName}`;\n\n    private applyMapping(item: any, fields: string[]): any {\n        if(!fields.length) return item;\n        let output: any = {};\n        Object.keys(item).filter(key => fields.indexOf(key) != -1).forEach(key => output[key] = item[key]);\n        return output\n    }\n\n    private applyFilter(item: any, filter: ApiEdgeQueryFilter): boolean {\n        switch(filter.type) {\n            case ApiEdgeQueryFilterType.Equals:\n                return item[filter.field] === filter.value;\n            case ApiEdgeQueryFilterType.NotEquals:\n                return item[filter.field] !== filter.value;\n            case ApiEdgeQueryFilterType.GreaterThan:\n                return item[filter.field] > filter.value;\n            case ApiEdgeQueryFilterType.GreaterThanOrEquals:\n                return item[filter.field] >= filter.value;\n            case ApiEdgeQueryFilterType.LowerThan:\n                return item[filter.field] < filter.value;\n            case ApiEdgeQueryFilterType.LowerThanOrEquals:\n                return item[filter.field] <= filter.value;\n            default:\n                return false;\n        }\n    }\n\n    private applyFilters(item: any, filters: ApiEdgeQueryFilter[]): boolean {\n        if(!filters.length) return true;\n        return filters.every(filter => this.applyFilter(item, filter))\n    }\n\n    getEntry = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            let entry = this.provider.find(s => s.id === context.id && this.applyFilters(s, context.filters));\n            if(entry) resolve(new ApiEdgeQueryResponse(this.applyMapping(entry, context.fields)));\n            else reject(new ApiEdgeError(404, \"Not Found\"));\n        })\n    };\n\n    listEntries = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve) => {\n            resolve(new ApiEdgeQueryResponse(\n                this.provider\n                    .filter(item => this.applyFilters(item, context.filters))\n                    .map(entry => this.applyMapping(entry, context.fields))))\n        })\n    };\n\n    createEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve) => {\n            body = body || {};\n            body.id = uuid.v4();\n\n            let entry = this.createModel(body);\n            this.provider.push(entry);\n            resolve(new ApiEdgeQueryResponse(this.applyMapping(entry, context.fields)))\n        })\n    };\n\n    updateEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            this.getEntry(context).then(entry => {\n                Object.keys(body).forEach(key => entry[key] = body[key]);\n                resolve(new ApiEdgeQueryResponse(this.applyMapping(entry, context.fields)))\n            }).catch(reject)\n        })\n    };\n\n    updateEntries = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            this.listEntries(context).then(entries => {\n                entries.data.forEach(entry =>\n                    Object.keys(body).forEach(key => entry[key] = body[key]));\n                resolve(new ApiEdgeQueryResponse(entries.data.map(entry => this.applyMapping(entry, context.fields))))\n            }).catch(reject)\n        })\n    };\n\n    removeEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            this.getEntry(context).then(entry => {\n                this.provider.splice(this.provider.indexOf(entry), 1);\n                resolve(new ApiEdgeQueryResponse(entry))\n            }).catch(reject);\n        })\n    };\n\n    removeEntries = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            this.listEntries(context).then(entries => {\n                entries.data.forEach(entry =>\n                    this.provider.splice(this.provider.indexOf(entry), 1));\n                resolve(new ApiEdgeQueryResponse(entries.data)) //TODO\n            }).catch(reject)\n        })\n    };\n\n    exists = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve) => {\n            let entry = this.provider.find((s: any) => s.id === context.id);\n            if(entry) resolve(new ApiEdgeQueryResponse(true));\n            else resolve(new ApiEdgeQueryResponse(false));\n        })\n    };\n\n    callMethod = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return this.methods[\"\"+context.id](context, body);\n    }\n\n}\n"]}