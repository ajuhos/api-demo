{"version":3,"file":"MongooseModelEdge.js","sourceRoot":"","sources":["../../../../src/edges/mongodb/MongooseModelEdge.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeDefinition, ApiEdgeError, ApiEdgeQueryContext, ApiEdgeQueryResponse, ApiEdgeQueryFilter, ApiEdgeQueryFilterType} from \"api-core\";\nimport * as mongoose from \"mongoose\";\n\nexport class MongooseModelEdge<T extends mongoose.Document> implements ApiEdgeDefinition {\n\n    name = \"entry\";\n    pluralName = \"entries\";\n\n    protected provider: mongoose.Model<T>;\n\n    methods: any = {};\n    relations = [];\n\n    inspect = () => `/${this.pluralName}`;\n\n    private static applyFilter(item: any, filter: ApiEdgeQueryFilter) {\n        switch(filter.type) {\n            case ApiEdgeQueryFilterType.Equals:\n                item[filter.field] = filter.value;\n                break;\n            case ApiEdgeQueryFilterType.NotEquals:\n                item[filter.field] = { $ne: filter.value };\n                break;\n            case ApiEdgeQueryFilterType.GreaterThan:\n                item[filter.field] = { $gt: filter.value };\n                break;\n            case ApiEdgeQueryFilterType.GreaterThanOrEquals:\n                item[filter.field] = { $gte: filter.value };\n                break;\n            case ApiEdgeQueryFilterType.LowerThan:\n                item[filter.field] = { $lt: filter.value };\n                break;\n            case ApiEdgeQueryFilterType.LowerThanOrEquals:\n                item[filter.field] = { $lte: filter.value };\n                break;\n            default:\n                return false;\n        }\n    }\n\n    private applyFilters(item: any, filters: ApiEdgeQueryFilter[]) {\n        if(!filters.length) return true;\n        filters.forEach(filter => MongooseModelEdge.applyFilter(item, filter))\n    }\n\n    getEntry = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise((resolve, reject) => {\n            let queryString = { _id: context.id };\n            this.applyFilters(queryString, context.filters);\n            let query = this.provider.findOne(queryString);\n            if(context.fields) query.select(context.fields.join(' '));\n            query.then(entry => {\n                resolve(new ApiEdgeQueryResponse(entry))\n            }).catch(reject);\n        })\n    };\n\n    listEntries = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise((resolve, reject) => {\n            let queryString = {};\n            this.applyFilters(queryString, context.filters);\n            let query = this.provider.find(queryString);\n            if(context.fields) query.select(context.fields.join(' '));\n            if(context.pagination) query.limit(context.pagination.limit).skip(context.pagination.skip);\n            query.then(entries => {\n                resolve(new ApiEdgeQueryResponse(entries))\n            }).catch(reject);\n        })\n    };\n\n    createEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            let query = this.provider.create(body);\n            query.then(entries => {\n                resolve(new ApiEdgeQueryResponse(entries))\n            }).catch(reject);\n        })\n    };\n\n    updateEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            if(!context.id) {\n                if(!body || (!body.id && !body._id)) reject(new ApiEdgeError(400, \"Missing ID\"));\n                context.id = body.id || body._id;\n            }\n\n            this.getEntry(context).then(resp => {\n                let entry = resp.data;\n                Object.keys(body).forEach(key => entry[key] = body[key]);\n                entry.save().then((entry: T) => {\n                    resolve(new ApiEdgeQueryResponse(entry))\n                }).catch(reject);\n            }).catch(reject)\n        })\n    };\n\n    updateEntries = (): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            reject(new ApiEdgeError(500, \"Not Supported\"))\n        })\n    };\n\n    removeEntry = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            if(!context.id) {\n                if(!body || (!body.id && !body._id)) reject(new ApiEdgeError(400, \"Missing ID\"));\n                context.id = body.id || body._id;\n            }\n\n            let query = this.provider.remove({ id: context.id });\n            query.then(() => {\n                resolve(new ApiEdgeQueryResponse({}))\n            }).catch(reject);\n        })\n    };\n\n    removeEntries = (): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            reject(new ApiEdgeError(500, \"Not Supported\"))\n        })\n    };\n\n    exists = (context: ApiEdgeQueryContext): Promise<ApiEdgeQueryResponse> => {\n        return new Promise<ApiEdgeQueryResponse>((resolve, reject) => {\n            let query = this.provider.findOne({ id: context.id }, 'id');\n            query.then(entry => {\n                resolve(new ApiEdgeQueryResponse(!!entry))\n            }).catch(reject);\n        })\n    };\n\n    callMethod = (context: ApiEdgeQueryContext, body: any): Promise<ApiEdgeQueryResponse> => {\n        return this.methods[\"\"+context.id](context, body);\n    }\n\n}\n"]}